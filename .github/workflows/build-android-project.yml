##############################################################################################################################
# # Cleanup:
#const sleep = ms => () => new Promise((resolve, reject) => window.setTimeout(resolve, ms));
#Promise.resolve()
#.then(() => {  document.getElementsByClassName("details-overlay details-reset position-relative d-inline-block ")[3].children[0].click();  })
#.then(sleep(500))
#.then(() => {  document.getElementsByClassName("dropdown-item btn-link menu-item-danger")[0].click();  })
#.then(sleep(1000))
#.then(() => {  document.getElementsByClassName("btn btn-block btn-danger")[0].click();});
#
# while [ 1 ] ; do sleep 4; xdotool key Up; sleep 0.1; xdotool key Return; done
##############################################################################################################################

name: "CI"

on: [push, pull_request]

jobs:
  build:
    if: "!contains(github.event.head_commit.message, 'ci skip') && (!contains(github.event_name, 'pull_request') || (contains(github.event_name, 'pull_request') && github.event.pull_request.head.repo.full_name != github.repository))"
    runs-on: ubuntu-latest
    steps:

    - name: "Checkout: Code"
      uses: actions/checkout@v4


    - name: "Checkout: Code (PR)"
      uses: actions/checkout@v4
      if: "contains(github.event_name, 'pull_request')"
      with:
        ref: ${{github.event.pull_request.head.ref}}
        repository: ${{github.event.pull_request.head.repo.full_name}}

    - name: "Setup: Java"
      uses: actions/setup-java@v4
      with:
        java-version: 17

    - name: "Cache: Gradle"
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle
          .gradle
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('gradle/wrapper/gradle-wrapper.*') }}

    - name: "Build: Project with make"
      run: make clean all

    - name: "Build: List Gradle output files"
      if: always()
      run: |
        echo "APK files:"
        if [ -d "app/build/outputs/apk" ]; then find app/build/outputs/apk/ -type f || true; else echo "(none)"; fi
        echo "AAB files:"
        if [ -d "app/build/outputs/bundle" ]; then find app/build/outputs/bundle/ -type f || true; else echo "(none)"; fi

    - name: "Check: outputs exist"
      id: check_outputs
      if: always()
      run: |
        HAS_APK=false
        HAS_AAB=false
        if [ -n "$(find app/build/outputs/apk -type f -name '*.apk' -print -quit 2>/dev/null)" ]; then HAS_APK=true; fi
        if [ -n "$(find app/build/outputs/bundle -type f -name '*.aab' -print -quit 2>/dev/null)" ]; then HAS_AAB=true; fi
        echo "has_apk=$HAS_APK" >> $GITHUB_OUTPUT
        echo "has_aab=$HAS_AAB" >> $GITHUB_OUTPUT
        if [ "$HAS_APK" = "true" ] || [ "$HAS_AAB" = "true" ]; then echo "has_any=true" >> $GITHUB_OUTPUT; else echo "has_any=false" >> $GITHUB_OUTPUT; fi

    - name: "Artifacts: All"
      if: always() && steps.check_outputs.outputs.has_any == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: "all"
        path: app/build/outputs/**
        retention-days: 5

    - name: "Artifacts: Android APK"
      if: steps.check_outputs.outputs.has_apk == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: "android-apk"
        path: app/build/outputs/apk/**

    - name: "Artifacts: Android AAB"
      if: steps.check_outputs.outputs.has_aab == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: "android-aab"
        path: app/build/outputs/bundle/**
